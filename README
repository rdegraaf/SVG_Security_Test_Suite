SVG Security Test Suite 
=======================

This project contains a battery of test cases designed to test how browsers 
handle CSS, JavaScript, and external objects loaded from SVG documents.

To run the tests, serve the directory `svg.test` from an Apache+PHP web server 
using the configuration given in `svg.test.conf`. Point all of the server 
names and aliases in `svg.test.conf` at the web server, then load 
http://svg.test using the browser that you want to test.  Pick a page from the 
test matrix and compare the actual results against the listed expected results.

Each page loads SVGs from different sources under different X-Frame-Options 
(XFO) and Content-Security-Policy (CSP) settings.  Pages contain several 
related test cases, and each test case is a row of SVGs loaded in eight 
different ways.  The base of each test case is a gray SVG circle.  Some test 
cases attempt to apply a stylesheet (either in-line in the SVG or external), 
which changes the colour of the SVG to orange.  Some test cases attempt to run 
a script (again, either in-line or external) which adds a red border to the SVG 
and attempts to call a function on the parent document that changes the border 
from solid to dashed.  Embedded image cases attempt to load a second image from 
within a gray circle SVG (scaled to 50%, in the bottom-right corner), with 
scripts and styles applied to the child.  Recursion test cases attempt to load 
a single SVG recursively.

Some test cases will intentionally fail to load because they aren't meaningful, 
such as in-line and data URI images in the different-origin pages.  Others 
should fail to load in certain cases due to the security policies applied to 
the page.  In many cases, only part of an image will load, such as the gray 
circle loading but its styesheet not being applied or its child images not 
loading.  Compare the images as rendered in your browser to the expected 
results listed below the images.

There may be errors in the expected results.  If you find one, please point it 
out and explain why it is incorrect.  Ideally, back up your arguments with 
relevant standards.

These test cases cover some areas which seem to be poorly specified, or at 
least not consistently implemented by browsers.  In these cases, my expected 
results are based on my analyses rather than directly on the standards.  If you 
have a good argument why my analysis is incorrect, preferrably one backed up by 
relevant standards, please point it out.

*   It is unclear whether in-line SVG should be treated as images or nested 
    documents which should be blockable by CSP, or as something else to which 
    CSP does not apply.  I am taking the position that they should be covered 
    by CSP, since `data:` URIs can also be used to load in-line images and 
    nested documents, and they need to be specifically permitted in CSP. 
    In-line SVGs are not static images, so covering them under `img-src` would 
    not be appropriate; treating them like `data:` URIs to `iframe` tags seems 
    most fitting.

*   If one document with a CSP loads a child document with a more permissive 
    CSP, and only the child document's CSP applies to the child document, then 
    the child document may be able to interact with the parent in ways that 
    violates its CSP (for instance, by loading a script that manipulates the 
    parent document from a source that is not allowed by the parent document).  
    Consequently, my position is that CSPs on nested documents must be 
    composed: parent document CSPs must apply to all child documents in 
    addition to their own CSPs.  An argument might be made that this is 
    unnecessary if the parent and child are loaded from different origins.


Last Tested
-----------

**Firefox**: 36.0a2 aurora  
**Chrome**: 41.0.2241.0 canary  
**Internet Explorer**: 11.0.9879.0 (Windows 10 Technical Preview) 


Known security model violations
-------------------------------

*   Internet Explorer always loads and applies external CSS on static images, 
    regardless of its origin (though CSP blocks them correctly in the 
    11.0.9879.0 technical preview build).

*   Old Chrome builds always loaded and applied external CSS on static images 
    (unless banned by CSP), but only if the CSS came from a different origin 
    than the image.  This was fixed in build 37.0.2054.0.  [Bug tracker](
    https://code.google.com/p/chromium/issues/detail?id=384527).  
    (bug-repros/*.chromebug2.test)
    
*   Internet Explorer always loads external images, even from a static image 
    context (though CSP blocks them correctly in the 11.0.9879.0 technical 
    preview build).  It never loads a document as a child of itself, but as 
    long as the URI changes at every iteration, SVGs loaded as static images 
    can be nested to an arbitrary depth.  Scripts don't run in static images, 
    so a deeply nested SVG requires a server-side script or a very large number 
    of images stored on the server.  Using bug-repros/recurse.svg.test/recursive-image.js 
    (a Node.js script) to serve identical SVGs with different names, IE 11 will 
    load it a few hundred thousand times until it runs out of memory and 
    crashes.  This issue was reported to Microsoft in summer 2014; they 
    dismissed it as "not a security bug".

*   Chrome applies in-line CSS to static images in violation of CSP.  [Bug 
    tracker](https://code.google.com/p/chromium/issues/detail?id=378500).
    (bug-repros/*.chromebug.test)
    
*   Prior to version 28.0, Firefox did not apply CSP to sandboxed iframes.  
    This appears to have been due to wider problems with sandboxed iframes.

*   All browsers display in-line SVG even under CSP `default-src 'none';`.  As 
    described above, there don't seem to be any clear rules for how to apply 
    CSP to in-line SVG.  [Firefox bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1018310).  
    [Chrome bug](https://code.google.com/p/chromium/issues/detail?id=378500).


Known stability and functionality issues
----------------------------------------

*   Chrome and Internet Explorer both crash when loading a recursive SVG that 
    loads itself using a `html:object` tag inside an `svg:foreignObject` tag, 
    with a script that appends a counter as a query parameter to the nested 
    SVG's URI so that every iteration's URI is unique.  Internet Explorer 11 is 
    documented as [not supporting](http://msdn.microsoft.com/en-us/library/hh834675(v=vs.85).aspx)
    `svg:foreignObject` and it indeed does not render `foreignObject` contents, 
    but it does run scripts and load external documents from within 
    `foreignObject`, which is all that is necessary for this attack.  A [Chrome 
    bug](https://code.google.com/p/chromium/issues/detail?id=383180) is open.  
    Microsoft dismissed my bug report as "not a security bug".  Both browsers 
    should take a lesson from Firefox on this one, which is to stop loading 
    nested documents at 10 levels.  There is a proof of concept script in 
    bug-repros/recurse.svg.test/recursive-foreignobject.svg.
    
*   Chrome applies both CSP `object-src` and `frame-source` to nested browsing 
    contexts created from `object` and `embed` tags, rather than only 
    `object-src`.  `frame-src` is only supposed to apply to `frame` and 
    `iframe` tags, though I'm not sure why the designers of CSP felt that 
    frames needed to be handled differently than objects and embeds.  [Bug 
    tracker](https://code.google.com/p/chromium/issues/detail?id=400840).

*   Chrome doesn't apply `style-src` correctly to sandboxed iframes.  If an SVG 
    in a sandboxed iframe tries to load an external stylesheet from the same 
    origin, it will be blocked by CSP unless the origin is explicitly listed in 
    `style-src`; Chrome blocks it even under `style-src 'self';`.  **SAME WITH 
    IMG-SRC?**  **BUG REFERENCE?**

*   No browsers ever load external stylesheets for in-line SVG.  The 
    `<?xml-stylesheet?> directive doesn't seem to be valid in HTML, so I'm not 
    sure if there is a valid way to do this.

*   Internet Explorer 11.0.9879.0 fails to load SVGs that contain 
    `foreignObject` blocks as static images.  It does load them as nested 
    documents, though it does not render the `foreignObject` contents.
*   Neither Firefox nor Chrome seem render foreignObjects in in-line SVG.  
    **MORE DETAILS?**

*   Chrome doesn't render objects (though it does render images) within 
    foreignObjects in sandboxed iframes.  This used to work in really old 
    builds like 27.  &&MORE DETAILS?**


Future work
-----------

*   Mobile browsers
*   HTML and embedded SVG with different CSPs, especially if they're 
    same-origin.
*   SVG's `use` element and anything else that takes a URI argument
*   SVG 2.0: <code>iframe</code> and <code>canvas</code> and other stuff
*   IE12's CSP implementation
*   CSP 2


TODO: document repro cases in README
TODO: verify latest build of Firefox
